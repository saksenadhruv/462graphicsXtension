{"name":"462graphicsXtension","tagline":"Assignment 5 of graphics - by Dhruv Saksena (dsaksena)","body":"# \r\n***\r\n\r\n## Final Report\r\n\r\nAs proposed I implemented a ray tracer with photon mapping.\r\n\r\n    * First Pass send a packet of photons from the light source and make a cache for results (photons eliminated using Russian Roulette) **Cache modeled as a KD-tree**.\r\n    * Second Pass calculate indirect illumination using photon map. Using **KNN** algo.\r\n\r\n#### Results\r\n\r\nAs can be seen below i get as better results than forward path-tracing as we have** better caustics from the Glass ball** now than path-tracer\r\n\r\n\r\n\r\n\r\n\r\n\r\n#### Redering by Photon Mapping\r\n\r\n![](https://cloud.githubusercontent.com/assets/7463041/11861597/f895a97e-a44f-11e5-91a0-a846482f3e24.png)\r\n\r\n\r\n#### Rendering without Photon Mapping\r\n\r\n![](https://cloud.githubusercontent.com/assets/7463041/11862133/5cb6acd2-a455-11e5-934b-44e0aec60b52.JPG)\r\n\r\n\r\n#### Photon Visualization\r\n\r\n![](https://cloud.githubusercontent.com/assets/7463041/11861983/d09398ba-a453-11e5-8f74-b5164dbe3f95.JPG)\r\n\r\n**Extra Credit- Did a twist on photon Mapping, treating stored photons as indirect light sources of b-directional filtering.**\r\n\r\n### Building instructions\r\n\r\nfully same drill as asst3 to make\r\n\r\n`cd build`\r\n\r\n`cmake ..`\r\n\r\n`make`\r\n\r\n`make install`\r\n\r\n`./pathtracer -s 64 -t 8 ../dae/sky/CBspheres.dae`\r\n\r\n\r\nbest results for 10,000,000 photons and k-NN (k = 64)\r\n\r\n\r\n**Over assignment 3 key controls we have also new keys in RENDER mode (should've pressed R)**\r\n\r\n\r\n|      Key      |         Effect            |\r\n| ------------- | ------------------------- |\r\n|      n/N      | Decrease k or radius      |\r\n|      m/M      | Increase k or radius      |\r\n|      l/L      |    num_photons/10         |\r\n|      ;/:      |    num_photons*10         |\r\n|      j/J      |    num_photons*2          | \r\n|      k/K      | toggle k-nn/radial search |\r\n|      p/P      |   toggle bi-directional   |\r\n\r\n* For bi-directional it takes A LOT of time because of the million-photons, suggestion to go to pathtracer.h and make int num_photons = 1000\r\n\r\n## Proposal\r\n1. I will be working alone, focusing on implementing Photon Mapping in option F: Advanced Monte Carlo Rendering. Reading the wiki I expect it to be a 2 step process. My extension will be implementing these 2 steps fully.\r\n    * First Pass send a packet of photons from the light source and make a cache for results (photons eliminated using Russian Roulette) Cache modeled as a KD-tree as proposed by wiki.\r\n    * Second Pass calculate indirect illumination using photon map. Using KNN algo.\r\n2. If instructors agree I will have full credit on implementing photon mapping correctly and then I would like to work on extra credit (because I need it and want it :) )\r\n\r\n3. I will firstly work on **bidirectional path tracing** as extra credit.\r\n\r\n4. Secondly, since I was a 418 student, I shall like to implement **Efficient BVH Construction via Approximate Agglomerative Clustering** for more extra credit.\r\n\r\n5. I really don't expect to reach here but if I do I like **Option I: kPhone 869 (15-869 Assignment)** especially since I will join Apple GPU Compute team to work on Iphones. More extra credit I hope.\r\n\r\n\r\nIf the instructors agree to this proposal great, otherwise if they feel photon mapping is not enough workload I can do **bidirectional path tracing** or **Efficient BVH Construction via Approximate Agglomerative Clustering** for normal credit as well.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}